# frozen_string_literal: true

require 'bigdecimal/math'

# The even product sequence. 
# { 2, 4 6 = 24, 8 10 12 = 960, 14 16 18 20 = 80640, ... }
#  epseq(5) #=> [2, 24, 960, 80640, 11531520, 2500485120]
def epseq(max_n)
  ep = 2
  n = 1
  ary = []
  loop do
    denom = 1
    for k in 1..n do
      denom *= ep
      ep += 2
    end
    ary << denom
    break if max_n < n
    n = n.succ
  end
  ary
end

# Computes binomial coefficients.
# @see https://tsujimotter.hatenablog.com/entry/ruby-binomial-coefficient
def binom(n, k)
  return 0 if n < k

  k = [k, n - k].min

  if k == 0
    val = 1
  else
    val = binom(n - 1, k - 1) * n / k
  end

  val
end



# Implementation for the Maclaurin series
# 
# Bad Precision :(
# Math.erf(erfinv(BigDecimal('0.1'), 20)) #=> 0.10000000000052131
# Math.erf(erfinv(BigDecimal('0.2'), 20)) #=> 0.20000000028100856
# Math.erf(erfinv(BigDecimal('0.3'), 20)) #=> 0.30000001180346025
# Math.erf(erfinv(BigDecimal('0.4'), 20)) #=> 0.4000001791110775
# Math.erf(erfinv(BigDecimal('0.5'), 20)) #=> 0.5000015985498969
# Math.erf(erfinv(BigDecimal('0.6'), 20)) #=> 0.6000105349420004
# Math.erf(erfinv(BigDecimal('0.7'), 20)) #=> 0.7000589682723795
# Math.erf(erfinv(BigDecimal('0.8'), 20)) #=> 0.8003176482068761
# Math.erf(erfinv(BigDecimal('0.9'), 20)) #=> 0.9020649811838225
def erfinv(x, prec)

  # @see https://oeis.org/A002067
  binom_sum = [
   1,
   1,
   7,
   127,
   4369,
   243649,
   20036983,
   2280356863,
   343141433761,
   65967241200001,
   15773461423793767,
   4591227123230945407,
   1598351733247609852849,
   655782249799531714375489,
   313160404864973852338669783,
   172201668512657346455126457343,
   108026349476762041127839800617281,
   76683701969726780307420968904733441,
   61154674195324330125295778531172438727,
   54441029530574028687402753586278549396607,
   53789884101606550209324949796685518122943569,
   58682332605925099908104273082987435279150522049,
   70358041406630998834159902148730577164631303295543,
   92314593080471626799652108247107813984162946264346623,
   132034545522738294934559794712527229683368402215775110881,
   205123592348209083599687465864398200639531076044966484944001,
   345006989575839203822428453992851144638053004553560063924073767,
   626335302110212978311199487037804496444985797387366410523685237887,
   1223860982467318058556067124360500102584757512734023139192895244251889,
   2567258777612779963106081775289009692115388691709607894977021426809296449,
   5767179588642773664103757091558966024739306956423269597395642863638011775383,
   13842913436751727551024887835857393834474466936041697629912062784746040235935743,
   35427371962600886946355638034739492709361667967069734967017260969912569100524432001,
   96478903292038166857069219570069821156162850855230324961123425171207009469499475125761,
   279058033757430254191199908494388076483336006431705345512319439780220594200803779226008967,
   855775437269969158544932931601929954235686438589003767888047692945458392606506499087747246207,
   2777832939005781761544789122211196731930798956872610037948429980153660176635792121985186643373969,
   9529086730191255005097798212490279424830532309292473165586611131114481272288924947082202268496143809,
   34494497380148415223069126660057004578509782473855883139231280024901315277470418216590165489559544536823,
   131580066535047820541778449639359441531453421366751989990683037689013455939084490788664204976057137240044543,
   528191859194494040740548636885965416430270508473761663124219686449457851025514085281925910159794703816464360481,
   2228451077633802541121183614572945475481064505650393681700931259878378150154892481004374599185648496332701026224001,
   9869600472060188082174678854156134555675987356242835093758190690143252173097542923043067692056713847214808997147794407,
   45833313999323782652126777200276927443372705736044936529417904984272943604890738547574951005135991644865197411445704960127,
   222931518511788646221991290602712763529415938773546255641059107169603903866499756369967981397107991049776562491159158726904369,
   1134527698448873185497314486477490987572756501867804980402745021341792040574964055430613778157981482792189341979514831280775830849,
   6034998749445828142377525291184007079143356506958731159502541079976119969373144612423160937612740261910702700279126760603018874896983,
   33522900986998652157765316887921284718995536275212525651162832561118423037329447587772117901087388918231781708765779957179619969893540863,
   194271838659345579945293256823267855182224392771150618510108194807488354462147693281957966966065373974627263301305014651339785154762856448961,
   1173545717669620433385248545141286691293195520518991403531356153056392712281174705546995393675989251674149037357002481469042769996841645663033601,
   7383217714663127743042801560578816867354769541145782152341714511997962429419333188346809915110765022990646905135315935941880353574870769910833872967
  ]

  epseqs = epseq(50)

  n = BigDecimal.double_fig + prec

  pi = BigMath.PI(prec)
  w_pi = BigDecimal(1)
  w = x
  s = 0
  for i in 0..(binom_sum.size-1) do
    r = Rational(binom_sum[i], epseqs[i]) * w_pi * w
    s += r
    break if (BigDecimal(r, n).exponent + n) < 0
    w_pi *= pi; w *= (x * x)
  end

  sqrtpi = BigMath.sqrt(pi, n)
  (sqrtpi * s).round(prec)

end


